---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Profil - Lost and Found Web" active="profile">
  <!-- Login Required Message -->
  <div id="loginRequired" class="mx-auto max-w-screen-lg px-4 py-8 text-center hidden">
    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
      <h2 class="text-2xl font-bold text-yellow-800 mb-4">Anmeldung erforderlich</h2>
      <p class="text-yellow-700 mb-4">Sie müssen sich anmelden, um Ihr Profil zu sehen.</p>
      <a href="/login/" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Zur Anmeldung
      </a>
    </div>
  </div>

  <!-- Profile Content (only shown when logged in) -->
  <div id="profileContent" class="mx-auto max-w-screen-lg px-4 py-8 hidden">
    <!-- Profile Header -->
    <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
      <div class="flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-8">
        <!-- Profile Picture -->
        <div class="flex-shrink-0">
          <div class="relative">
            <img id="profilePicture" src="/uploads/default-avatar.svg" alt="Profilbild" class="w-32 h-32 rounded-full object-cover border-4 border-blue-200">
            <button id="changeProfilePicture" class="absolute bottom-0 right-0 bg-blue-600 hover:bg-blue-700 text-white rounded-full p-2 shadow-lg transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
              </svg>
            </button>
          </div>
          <input type="file" id="profilePictureInput" accept="image/*" class="hidden">
        </div>

        <!-- Profile Info -->
        <div class="flex-grow text-center md:text-left">
          <h1 id="profileName" class="text-3xl font-bold text-gray-800 mb-2">Lädt...</h1>
          <p id="profileEmail" class="text-gray-600 mb-2">E-Mail lädt...</p>
          <p id="profilePhone" class="text-gray-600 mb-4">Telefon lädt...</p>
          
          <button id="editProfileButton" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition duration-300">
            Profil bearbeiten
          </button>
        </div>
      </div>
    </div>

    <!-- User's Listings -->
    <div class="bg-white rounded-lg shadow-lg p-6">
      <h2 class="text-2xl font-bold text-gray-800 mb-6">Meine Meldungen</h2>
      
      <!-- Loading Indicator -->
      <div id="listingsLoading" class="text-center py-8">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <p class="mt-2 text-gray-600">Lade Ihre Meldungen...</p>
      </div>

      <!-- Items Grid -->
      <div id="userListings" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 hidden">
        <!-- Items will be loaded here dynamically -->
      </div>

      <!-- No Listings Message -->
      <div id="noListings" class="text-center py-12 hidden">
        <div class="text-gray-500 text-lg">Sie haben noch keine Gegenstände gemeldet.</div>
        <p class="text-gray-400 mt-2">
          <a href="/report/" class="text-blue-600 hover:underline">Klicken Sie hier, um einen Gegenstand zu melden</a>
        </p>
      </div>
    </div>
  </div>

  <!-- Edit Profile Modal -->
  <div id="editProfileModal" class="fixed inset-0 z-50 hidden">
    <div class="absolute inset-0 backdrop-blur-sm bg-transparent"></div>
    
    <div class="relative flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
        <div class="p-6">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-gray-800">Profil bearbeiten</h3>
            <button id="closeEditModal" class="text-gray-400 hover:text-gray-600 text-2xl font-bold">×</button>
          </div>

          <form id="editProfileForm" class="space-y-4">
            <div>
              <label for="editPrename" class="block text-sm font-medium text-gray-700 mb-1">Vorname</label>
              <input type="text" id="editPrename" name="prename" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <div>
              <label for="editSurname" class="block text-sm font-medium text-gray-700 mb-1">Nachname</label>
              <input type="text" id="editSurname" name="surname" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
            </div>
            
            <div>
              <label for="editPhone" class="block text-sm font-medium text-gray-700 mb-1">Telefonnummer</label>
              <input type="tel" id="editPhone" name="phone" required class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
            </div>

            <div id="editMessage" class="text-center hidden">
              <p id="editMessageText" class="text-sm"></p>
            </div>

            <div class="flex space-x-4">
              <button type="button" id="cancelEdit" class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300">
                Abbrechen
              </button>
              <button type="submit" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">
                Speichern
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let currentUser = null;
      let categories = {};
      let locations = {};
      
      checkLoginStatus();
      
      // DOM Elements
      const profilePictureInput = document.getElementById('profilePictureInput');
      const changeProfilePictureBtn = document.getElementById('changeProfilePicture');
      const editProfileButton = document.getElementById('editProfileButton');
      const editProfileModal = document.getElementById('editProfileModal');
      const closeEditModal = document.getElementById('closeEditModal');
      const cancelEdit = document.getElementById('cancelEdit');
      const editProfileForm = document.getElementById('editProfileForm');

      // Event Listeners
      changeProfilePictureBtn.addEventListener('click', () => {
        profilePictureInput.click();
      });

      profilePictureInput.addEventListener('change', handleProfilePictureChange);
      editProfileButton.addEventListener('click', openEditModal);
      closeEditModal.addEventListener('click', closeEditModalHandler);
      cancelEdit.addEventListener('click', closeEditModalHandler);
      editProfileForm.addEventListener('submit', handleProfileUpdate);

      // Modal close on backdrop click
      editProfileModal.addEventListener('click', (e) => {
        if (e.target === editProfileModal) closeEditModalHandler();
      });

      async function checkLoginStatus() {
        const user = localStorage.getItem('user');
        const loginRequired = document.getElementById('loginRequired');
        const profileContent = document.getElementById('profileContent');

        if (user) {
          currentUser = JSON.parse(user);
          loginRequired.classList.add('hidden');
          profileContent.classList.remove('hidden');
          
          await loadUserProfile();
          await loadUserListings();
        } else {
          loginRequired.classList.remove('hidden');
          profileContent.classList.add('hidden');
        }
      }

      async function loadUserProfile() {
        try {
          const response = await fetch(`/api/userdb?id=${currentUser.id}`);
          const result = await response.json();
          
          if (result.success === 'ok' && result.user) {
            const user = result.user;
            
            document.getElementById('profileName').textContent = `${user.prename} ${user.surname}`;
            document.getElementById('profileEmail').textContent = user.email;
            document.getElementById('profilePhone').textContent = user.phone || 'Nicht angegeben';
            
            // Load profile picture
            if (user.profilePicture) {
              document.getElementById('profilePicture').src = user.profilePicture;
            }
            
            // Update form fields
            document.getElementById('editPrename').value = user.prename;
            document.getElementById('editSurname').value = user.surname;
            document.getElementById('editPhone').value = user.phone || '';
          }
        } catch (error) {
          console.error('Error loading user profile:', error);
        }
      }

      async function loadUserListings() {
        try {
          // Load categories and locations first
          await Promise.all([loadCategories(), loadLocations()]);
          
          const response = await fetch(`/api/items?userId=${currentUser.id}`);
          const result = await response.json();
          
          const listingsLoading = document.getElementById('listingsLoading');
          const userListings = document.getElementById('userListings');
          const noListings = document.getElementById('noListings');
          
          listingsLoading.classList.add('hidden');
          
          if (result.success === 'ok' && result.items && result.items.length > 0) {
            const userItems = result.items.filter(item => item.userId === currentUser.id);
            
            if (userItems.length > 0) {
              userListings.innerHTML = userItems.map(item => createItemCard(item)).join('');
              userListings.classList.remove('hidden');
              noListings.classList.add('hidden');
            } else {
              userListings.classList.add('hidden');
              noListings.classList.remove('hidden');
            }
          } else {
            userListings.classList.add('hidden');
            noListings.classList.remove('hidden');
          }
        } catch (error) {
          console.error('Error loading user listings:', error);
          document.getElementById('listingsLoading').classList.add('hidden');
          document.getElementById('noListings').classList.remove('hidden');
        }
      }

      async function loadCategories() {
        try {
          const response = await fetch('/api/categorydb');
          const result = await response.json();
          
          if (result.success === 'ok') {
            result.categories.forEach(cat => {
              categories[cat.id] = cat.name;
            });
          }
        } catch (error) {
          console.error('Error loading categories:', error);
        }
      }

      async function loadLocations() {
        try {
          const response = await fetch('/api/locations');
          const result = await response.json();
          
          if (result.success === 'ok') {
            result.locations.forEach(loc => {
              locations[loc.id] = loc.name;
            });
          }
        } catch (error) {
          console.error('Error loading locations:', error);
        }
      }

      function createItemCard(item) {
        const categoryName = categories[item.categoryId] || 'Unbekannt';
        const locationName = locations[item.locationId] || 'Unbekannt';
        const date = item.date ? new Date(item.date * 1000).toLocaleDateString('de-DE') : 'Unbekannt';
        const typeLabel = item.type === 'isLost' ? 'Verloren' : 'Gefunden';
        const typeBadgeClass = item.type === 'isLost' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800';
        
        const imageSrc = item.img || '/uploads/placeholder.svg';

        return `
          <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition duration-300">
            <div class="h-48 bg-gray-100 overflow-hidden">
              <img src="${imageSrc}" alt="${item.title}" class="w-full h-full object-contain" onerror="this.src='/uploads/placeholder.svg'">
            </div>
            
            <div class="p-4">
              <span class="inline-block px-2 py-1 text-xs font-semibold rounded-full ${typeBadgeClass} mb-2">
                ${typeLabel}
              </span>
              
              <h3 class="text-lg font-semibold text-gray-800 mb-2 line-clamp-2">${item.title}</h3>
              
              <div class="space-y-1 text-sm text-gray-600 mb-4">
                <p><strong>Kategorie:</strong> ${categoryName}</p>
                <p><strong>Ort:</strong> ${locationName}</p>
                <p><strong>Datum:</strong> ${date}</p>
              </div>
              
              <a href="/items/${item.id}" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition duration-300 inline-block text-center">
                Details anzeigen
              </a>
            </div>
          </div>
        `;
      }

      async function handleProfilePictureChange(event) {
        const file = event.target.files[0];
        if (!file) return;

        if (file.size > 5 * 1024 * 1024) {
          alert('Datei ist zu groß. Maximale Größe: 5MB');
          return;
        }

        if (!file.type.startsWith('image/')) {
          alert('Bitte wählen Sie eine gültige Bilddatei.');
          return;
        }

        const formData = new FormData();
        formData.append('profilePicture', file);
        formData.append('userId', currentUser.id);

        try {
          const response = await fetch('/api/profile', {
            method: 'POST',
            body: formData
          });

          const result = await response.json();

          if (result.success === 'ok') {
            document.getElementById('profilePicture').src = result.profilePictureUrl;
            
            // Update localStorage
            currentUser.profilePicture = result.profilePictureUrl;
            localStorage.setItem('user', JSON.stringify(currentUser));
          } else {
            alert('Fehler beim Hochladen des Profilbildes: ' + result.message);
          }
        } catch (error) {
          console.error('Error uploading profile picture:', error);
          alert('Fehler beim Hochladen des Profilbildes.');
        }
      }

      function openEditModal() {
        editProfileModal.classList.remove('hidden');
      }

      function closeEditModalHandler() {
        editProfileModal.classList.add('hidden');
        document.getElementById('editMessage').classList.add('hidden');
      }

      async function handleProfileUpdate(event) {
        event.preventDefault();

        const formData = new FormData(editProfileForm);
        const data = {
          userId: currentUser.id,
          prename: formData.get('prename'),
          surname: formData.get('surname'),
          phone: formData.get('phone')
        };

        try {
          const response = await fetch('/api/profile', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });

          const result = await response.json();
          const editMessage = document.getElementById('editMessage');
          const editMessageText = document.getElementById('editMessageText');

          if (result.success === 'ok') {
            editMessageText.textContent = 'Profil erfolgreich aktualisiert!';
            editMessage.className = 'text-center text-green-600';
            editMessage.classList.remove('hidden');

            // Update localStorage
            currentUser.prename = data.prename;
            currentUser.surname = data.surname;
            currentUser.phone = data.phone;
            localStorage.setItem('user', JSON.stringify(currentUser));

            // Update UI
            document.getElementById('profileName').textContent = `${data.prename} ${data.surname}`;
            document.getElementById('profilePhone').textContent = data.phone || 'Nicht angegeben';

            setTimeout(() => {
              closeEditModalHandler();
            }, 1500);
          } else {
            editMessageText.textContent = 'Fehler beim Aktualisieren: ' + result.message;
            editMessage.className = 'text-center text-red-600';
            editMessage.classList.remove('hidden');
          }
        } catch (error) {
          console.error('Error updating profile:', error);
          const editMessage = document.getElementById('editMessage');
          const editMessageText = document.getElementById('editMessageText');
          editMessageText.textContent = 'Netzwerkfehler beim Aktualisieren des Profils.';
          editMessage.className = 'text-center text-red-600';
          editMessage.classList.remove('hidden');
        }
      }
    });
  </script>

  <style>
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
</Layout>