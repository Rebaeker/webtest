---
import Layout from "../layouts/Layout.astro";

// Importiere die SQLite-Bibliothek und den Pfad, um auf die Datenbank zuzugreifen
import sqlite from 'better-sqlite3';
import * as path from 'path';

// Der Pfad zur Datenbankdatei. Stellen Sie sicher, dass dies korrekt ist.
// Wenn Ihre database.db im Ordner 'database' liegt, sollte der Pfad so aussehen:
const dbPath = path.resolve("./src/database/database.db"); 
// Wenn database.db direkt im Projekt-Root liegt, dann: const dbPath = path.resolve("./database.db");

// Variablen für Kategorien und Standorte initialisieren
let categories = [];
let locations = [];

// Datenbankabfrage im Server-Side Render (SSR) oder Build-Prozess von Astro
// Dieser Code wird auf dem Server ausgeführt, NICHT im Browser
try {
  const db = new sqlite(dbPath, { readonly: true }); // Datenbank nur zum Lesen öffnen
  // Kategorien aus der 'categories'-Tabelle abrufen
  categories = db.prepare('SELECT id, name FROM categories ORDER BY name ASC').all();
  // Standorte aus der 'locations'-Tabelle abrufen
  locations = db.prepare('SELECT id, name FROM locations ORDER BY name ASC').all();
  db.close(); // Datenbankverbindung schließen
} catch (error) {
  console.error("Fehler beim Laden der Kategorien oder Standorte aus der Datenbank:", error);
  // Hier könnten Sie auch eine Fallback-Nachricht oder leere Optionen anzeigen
  // oder den Fehler auf der Seite sichtbar machen.
}

// Client-seitiges Skript für die Formularverarbeitung
// Dieses Skript wird im Browser ausgeführt
const script = `
  document.addEventListener('DOMContentLoaded', () => {
    const reportForm = document.getElementById('reportForm');
    const messageDiv = document.getElementById('message');

    if (reportForm) {
      reportForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // Verhindert das Standard-Formular-Submit

        messageDiv.textContent = ''; // Alte Nachrichten löschen
        messageDiv.className = 'p-3 rounded-md text-center'; // Reset classes

        const formData = new FormData(reportForm);
        const itemData = {};
        for (const [key, value] of formData.entries()) {
          itemData[key] = value;
        }
        itemData.title = itemData.name;

        // Konvertiere die Datumseingabe in einen Unix-Timestamp (Sekunden seit 1970)
        if (itemData.date) {
            itemData.date = new Date(itemData.date).getTime() / 1000;
        } else {
            itemData.date = null; // Wenn kein Datum eingegeben wurde
        }
        itemData.reportedAt = Math.floor(Date.now() / 1000); // Aktueller Unix-Timestamp

        // Die tatsächlichen IDs aus den Dropdowns verwenden
        // itemData.category und itemData.location enthalten jetzt die ID-Werte der ausgewählten Optionen
        itemData.categoryId = itemData.category; 
        itemData.locationId = itemData.location; 
        
        // Dummy-Wert für userId, da dieser aus der Authentifizierung kommen müsste
        // In einer echten Anwendung würden Sie hier die ID des eingeloggten Benutzers verwenden.
        itemData.userId = 'dummy-user-id-123'; 

        // Entferne die temporären Felder 'category' und 'location', da wir categoryId und locationId verwenden
        delete itemData.category;
        delete itemData.location;

        // Bild-Upload: falls Datei ausgewählt, nur Dateiname übernehmen, sonst null
        const imgFile = formData.get('img');
        itemData.img = (imgFile && imgFile.name) ? imgFile.name : null;

        console.log('Sende Daten:', itemData);

        try {
          // Annahme: Ihre POST-API-Route ist unter /api/items erreichbar
          const response = await fetch('/api/items', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(itemData),
          });

          const result = await response.json();

          if (response.ok && result.success === 'ok') {
            messageDiv.textContent = 'Gegenstand erfolgreich gemeldet!';
            messageDiv.classList.add('bg-green-100', 'text-green-800');
            reportForm.reset(); // Formular zurücksetzen
          } else {
            messageDiv.textContent = 'Fehler beim Melden des Gegenstands: ' + (result.message || 'Unbekannter Fehler');
            messageDiv.classList.add('bg-red-100', 'text-red-800');
          }
        } catch (error) {
          console.error('Fetch-Fehler:', error);
          messageDiv.textContent = 'Netzwerkfehler oder Server nicht erreichbar.';
          messageDiv.classList.add('bg-red-100', 'text-red-800');
        }
      });
    }
  });
`;
---

<Layout title="Gegenstand melden" active="report">
  <div class="mx-auto max-w-screen-lg px-4">
    <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Melden Sie einen verlorenen oder gefundenen Gegenstand.</h1>

    <form id="reportForm" class="space-y-6">
      <!-- Is the item lost or found? -->
      <div>
        <label class="block text-gray-700 text-lg font-semibold mb-2">Ist der Gegenstand verloren oder gefunden? <span class="text-red-500">*</span></label>
        <div class="flex items-center space-x-6">
          <label class="inline-flex items-center">
            <input type="radio" name="type" value="isLost" class="form-radio h-5 w-5 text-blue-600 rounded-full" required>
            <span class="ml-2 text-gray-700 text-base">Verloren</span>
          </label>
          <label class="inline-flex items-center">
            <input type="radio" name="type" value="isFound" class="form-radio h-5 w-5 text-blue-600 rounded-full" required>
            <span class="ml-2 text-gray-700 text-base">Gefunden</span>
          </label>
        </div>
      </div>

      <!-- Item name -->
      <div>
        <label for="name" class="block text-gray-700 text-lg font-semibold mb-2">Gegenstandsname <span class="text-red-500">*</span></label>
        <input type="text" id="name" name="name" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" placeholder="Name des Gegenstands" required>
      </div>

      <!-- Category Dropdown (JETZT DYNAMISCH BEFÜLLT) -->
      <div>
        <label for="category" class="block text-gray-700 text-lg font-semibold mb-2">Kategorie <span class="text-red-500">*</span></label>
        <select id="category" name="category" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" required>
            <option value="">Wählen Sie eine Kategorie</option>
            {categories.map(category => (
              <option value={category.id}>{category.name}</option>
            ))}
        </select>
      </div>

      <!-- Location Dropdown (JETZT DYNAMISCH BEFÜLLT) -->
      <div>
        <label for="location" class="block text-gray-700 text-lg font-semibold mb-2">Ort <span class="text-red-500">*</span></label>
        <select id="location" name="location" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" required>
            <option value="">Wählen Sie einen Ort</option>
            {locations.map(location => (
              <option value={location.id}>{location.name}</option>
            ))}
        </select>
      </div>

      <!-- Date Lost/Found -->
      <div>
        <label for="date" class="block text-gray-700 text-lg font-semibold mb-2">Datum verloren/gefunden</label>
        <!-- Durch onclick wird beim Klick auf irgendeine Stelle im Feld sofort der Date-Picker geöffnet -->
        <input
          type="date"
          id="date"
          name="date"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base cursor-pointer"
          onclick="this.showPicker()"
        >
      </div>

      <!-- Description -->
      <div>
        <label for="description" class="block text-gray-700 text-lg font-semibold mb-2">Beschreibung</label>
        <textarea id="description" name="description" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" placeholder="Geben Sie Details wie Farbe, Marke, besondere Merkmale usw. an."></textarea>
      </div>

      <!-- Image-Upload -->
      <div>
        <label for="img" class="block text-gray-700 text-lg font-semibold mb-2">Bild hochladen</label>
        <input type="file" id="img" name="img" accept="image/*" class="w-full text-base" />
      </div>

      <!-- Message Area for Feedback -->
      <div id="message" class="hidden"></div>

      <!-- Submit Button -->
      <div class="text-center">
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 ease-in-out shadow-md">
          Bericht absenden
        </button>
      </div>
    </form>
  </div>

  <script is:inline>
    {script}
  </script>
</Layout>
