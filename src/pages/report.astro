---
import Layout from "../layouts/Layout.astro";

// Importiere die SQLite-Bibliothek und den Pfad, um auf die Datenbank zuzugreifen
import sqlite from 'better-sqlite3';
import * as path from 'path';

// Der Pfad zur Datenbankdatei. Stellen Sie sicher, dass dies korrekt ist.
// Wenn Ihre database.db im Ordner 'database' liegt, sollte der Pfad so aussehen:
const dbPath = path.resolve("./src/database/database.db"); 
// Wenn database.db direkt im Projekt-Root liegt, dann: const dbPath = path.resolve("./database.db");

// Variablen für Kategorien und Standorte initialisieren
let categories = [];
let locations = [];

// Datenbankabfrage im Server-Side Render (SSR) oder Build-Prozess von Astro
// Dieser Code wird auf dem Server ausgeführt, NICHT im Browser
try {
  const db = new sqlite(dbPath, { readonly: true }); // Datenbank nur zum Lesen öffnen
  // Kategorien aus der 'categories'-Tabelle abrufen
  categories = db.prepare('SELECT id, name FROM categories ORDER BY name ASC').all();
  // Standorte aus der 'locations'-Tabelle abrufen
  locations = db.prepare('SELECT id, name FROM locations ORDER BY name ASC').all();
  db.close(); // Datenbankverbindung schließen
} catch (error) {
  console.error("Fehler beim Laden der Kategorien oder Standorte aus der Datenbank:", error);
  // Hier könnten Sie auch eine Fallback-Nachricht oder leere Optionen anzeigen
  // oder den Fehler auf der Seite sichtbar machen.
}
---

<Layout title="Gegenstand melden" active="report">
  <!-- Login Required Message -->
  <div id="loginRequired" class="mx-auto max-w-screen-lg px-4 py-8 text-center hidden">
    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
      <h2 class="text-2xl font-bold text-yellow-800 mb-4">Anmeldung erforderlich</h2>
      <p class="text-yellow-700 mb-4">Sie müssen sich anmelden, um Gegenstände zu melden.</p>
      <a href="/login/" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Zur Anmeldung
      </a>
    </div>
  </div>

  <!-- Report Form (only shown when logged in) -->
  <div id="reportSection" class="mx-auto max-w-screen-lg px-4 hidden">
    <h1 class="text-3xl font-bold text-gray-800 mb-6 text-center">Melden Sie einen verlorenen oder gefundenen Gegenstand.</h1>
    
    <!-- User Info Display -->
    <div id="userDisplay" class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
      <p class="text-blue-800">
        <strong>Gemeldet von:</strong> <span id="currentUserEmail"></span>
      </p>
    </div>

    <!-- WICHTIG: action="#" und method="post" hinzugefügt, um Standard-Submission zu verhindern -->
    <form id="reportForm" class="space-y-6" action="#" method="post">
      <!-- Is the item lost or found? -->
      <div>
        <label class="block text-gray-700 text-lg font-semibold mb-2">Ist der Gegenstand verloren oder gefunden? <span class="text-red-500">*</span></label>
        <div class="flex items-center space-x-6">
          <label class="inline-flex items-center">
            <input type="radio" name="type" value="isLost" class="form-radio h-5 w-5 text-blue-600 rounded-full" required>
            <span class="ml-2 text-gray-700 text-base">Verloren</span>
          </label>
          <label class="inline-flex items-center">
            <input type="radio" name="type" value="isFound" class="form-radio h-5 w-5 text-blue-600 rounded-full" required>
            <span class="ml-2 text-gray-700 text-base">Gefunden</span>
          </label>
        </div>
      </div>

      <!-- Item name -->
      <div>
        <label for="name" class="block text-gray-700 text-lg font-semibold mb-2">Gegenstandsname <span class="text-red-500">*</span></label>
        <input type="text" id="name" name="name" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" placeholder="Name des Gegenstands" required>
      </div>

      <!-- Category Dropdown (JETZT DYNAMISCH BEFÜLLT) -->
      <div>
        <label for="category" class="block text-gray-700 text-lg font-semibold mb-2">Kategorie <span class="text-red-500">*</span></label>
        <select id="category" name="category" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" required>
            <option value="">Wählen Sie eine Kategorie</option>
            {categories.map(category => (
              <option value={category.id}>{category.name}</option>
            ))}
        </select>
      </div>

      <!-- Location Dropdown (JETZT DYNAMISCH BEFÜLLT) -->
      <div>
        <label for="location" class="block text-gray-700 text-lg font-semibold mb-2">Ort <span class="text-red-500">*</span></label>
        <select id="location" name="location" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" required>
            <option value="">Wählen Sie einen Ort</option>
            {locations.map(location => (
              <option value={location.id}>{location.name}</option>
            ))}
        </select>
      </div>

      <!-- Date Lost/Found -->
      <div>
        <label for="date" class="block text-gray-700 text-lg font-semibold mb-2">Datum verloren/gefunden</label>
        <!-- Durch onclick wird beim Klick auf irgendeine Stelle im Feld sofort der Date-Picker geöffnet -->
        <input
          type="date"
          id="date"
          name="date"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base cursor-pointer"
          onclick="this.showPicker()"
        >
      </div>

      <!-- Description -->
      <div>
        <label for="description" class="block text-gray-700 text-lg font-semibold mb-2">Beschreibung</label>
        <textarea id="description" name="description" rows="4" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 text-base" placeholder="Geben Sie Details wie Farbe, Marke, besondere Merkmale usw. an."></textarea>
      </div>

      <!-- Image-Upload -->
      <div>
        <label for="img" class="block text-gray-700 text-lg font-semibold mb-2">Bild hochladen</label>
        <div class="space-y-4">
          <input 
            type="file" 
            id="img" 
            name="img" 
            accept="image/*" 
            class="w-full text-base file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" 
          />
          
          <!-- Image Preview -->
          <div id="imagePreview" class="hidden">
            <img id="previewImg" src="" alt="Vorschau" class="max-w-xs max-h-48 rounded-lg shadow-md">
            <button type="button" id="removeImage" class="mt-2 text-red-600 hover:text-red-800 text-sm">Bild entfernen</button>
          </div>
        </div>
      </div>

      <!-- Message Area for Feedback -->
      <div id="message" class="p-3 rounded-md text-center hidden"></div>

      <!-- Submit Button -->
      <div class="text-center">
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition duration-300 ease-in-out shadow-md">
          Bericht absenden
        </button>
      </div>
    </form>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      checkLoginStatus();
      
      const reportForm = document.getElementById('reportForm');
      const messageDiv = document.getElementById('message');
      const imgInput = document.getElementById('img');
      const imagePreview = document.getElementById('imagePreview');
      const previewImg = document.getElementById('previewImg');
      const removeImageBtn = document.getElementById('removeImage');

      // Image preview functionality
      imgInput.addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
          if (file.size > 5 * 1024 * 1024) {
            alert('Datei ist zu groß. Maximale Größe: 5MB');
            imgInput.value = '';
            return;
          }

          if (!file.type.startsWith('image/')) {
            alert('Bitte wählen Sie eine gültige Bilddatei.');
            imgInput.value = '';
            return;
          }

          const reader = new FileReader();
          reader.onload = function(e) {
            previewImg.src = e.target.result;
            imagePreview.classList.remove('hidden');
          };
          reader.readAsDataURL(file);
        } else {
          imagePreview.classList.add('hidden');
        }
      });

      // Remove image functionality
      removeImageBtn.addEventListener('click', function() {
        imgInput.value = '';
        imagePreview.classList.add('hidden');
      });

      if (reportForm) {
        reportForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          // Check if user is still logged in
          const user = localStorage.getItem('user');
          if (!user) {
            alert('Sie müssen sich anmelden, um Gegenstände zu melden.');
            window.location.href = '/login/';
            return;
          }

          messageDiv.textContent = '';
          messageDiv.className = 'p-3 rounded-md text-center';
          messageDiv.classList.remove('hidden');
          messageDiv.textContent = 'Übertrage Daten...';
          messageDiv.classList.add('bg-blue-100', 'text-blue-800');

          // Use FormData to handle file uploads
          const formData = new FormData(reportForm);

          try {
            const response = await fetch('/api/items', {
              method: 'POST',
              body: formData,
            });

            console.log('Response status:', response.status);
            const result = await response.json();
            console.log('Response result:', result);

            if (response.ok && result.success === 'ok') {
              messageDiv.textContent = 'Gegenstand erfolgreich gemeldet!';
              messageDiv.className = 'p-3 rounded-md text-center bg-green-100 text-green-800';
              reportForm.reset();
              imagePreview.classList.add('hidden');
            } else {
              messageDiv.textContent = 'Fehler beim Melden des Gegenstands: ' + (result.message || 'Unbekannter Fehler');
              messageDiv.className = 'p-3 rounded-md text-center bg-red-100 text-red-800';
            }
          } catch (error) {
            console.error('Fetch-Fehler:', error);
            messageDiv.textContent = 'Netzwerkfehler oder Server nicht erreichbar.';
            messageDiv.className = 'p-3 rounded-md text-center bg-red-100 text-red-800';
          }
        });
      }
    });

    function checkLoginStatus() {
      const user = localStorage.getItem('user');
      const loginRequired = document.getElementById('loginRequired');
      const reportSection = document.getElementById('reportSection');
      const currentUserEmail = document.getElementById('currentUserEmail');

      if (user) {
        const userData = JSON.parse(user);
        loginRequired.classList.add('hidden');
        reportSection.classList.remove('hidden');
        currentUserEmail.textContent = userData.email;
      } else {
        loginRequired.classList.remove('hidden');
        reportSection.classList.add('hidden');
      }
    }
  </script>
</Layout>